{"version":3,"file":"CombatSessionView-BUYiqnNW.js","sources":["../../src/components/ui/Divider.tsx","../../src/features/combats/components/CombatParticipantList.tsx","../../src/features/combats/components/CombatParticipantDetails.tsx","../../src/features/combats/components/AddParticipantDialog.tsx","../../src/features/combats/components/InitiativeDialog.tsx","../../src/features/combats/hooks/useCombatSession.ts","../../src/features/combats/views/ActiveCombatView.tsx","../../src/features/combats/views/CombatSessionView.tsx"],"sourcesContent":["import React from 'react';\n\ninterface DividerProps {\n  orientation?: 'horizontal' | 'vertical';\n  className?: string;\n  sx?: Record<string, any>;\n}\n\nconst Divider: React.FC<DividerProps> = ({\n  orientation = 'horizontal',\n  className = '',\n  sx = {}\n}) => {\n  // Convert sx props to inline styles\n  const inlineStyle: React.CSSProperties = {};\n  \n  // Handle commonly used sx properties\n  if (sx.my) inlineStyle.margin = `${sx.my * 0.25}rem 0`;\n  if (sx.mx) inlineStyle.margin = `0 ${sx.mx * 0.25}rem`;\n  if (sx.m) inlineStyle.margin = `${sx.m * 0.25}rem`;\n  \n  const orientationClass = \n    orientation === 'horizontal' \n      ? 'w-full border-t' \n      : 'h-full border-l';\n  \n  return (\n    <hr\n      className={`\n        border-slate-700/30\n        ${orientationClass}\n        ${className}\n      `}\n      style={inlineStyle}\n    />\n  );\n};\n\nexport default Divider; ","import React from 'react';\nimport { List, ListItem, Typography, Avatar, Box, Chip } from '../../../components/ui';\nimport { CombatParticipant } from '../hooks/useCombatSession';\n\n/**\n * Badge component for initiative display\n */\ninterface BadgeProps {\n  content: React.ReactNode;\n  color?: 'primary' | 'error' | string;\n  className?: string;\n}\n\nconst InitiativeBadge: React.FC<BadgeProps> = ({ content, color = \"primary\", className = \"\" }) => (\n  <div className={`relative inline-flex items-center ${className}`}>\n    <span className={`absolute -top-2 -right-2 flex items-center justify-center w-5 h-5 text-xs text-white rounded-full ${color === 'primary' ? 'bg-blue-500' : 'bg-red-500'}`}>\n      {content}\n    </span>\n  </div>\n);\n\ninterface CombatParticipantListProps {\n  participants: CombatParticipant[];\n  currentTurnIndex: number;\n  selectedParticipantId: string | null;\n  onSelectParticipant: (id: string) => void;\n}\n\n/**\n * Displays a list of combat participants with initiative and status indicators\n */\nexport const CombatParticipantList: React.FC<CombatParticipantListProps> = ({\n  participants,\n  currentTurnIndex,\n  selectedParticipantId,\n  onSelectParticipant\n}) => {\n  return (\n    <List className=\"w-full max-h-[60vh] overflow-auto\" data-testid=\"participant-list\">\n      {participants.map((participant, index) => {\n        const isCurrentTurn = index === currentTurnIndex;\n        const isSelected = participant.id === selectedParticipantId;\n        const testIdName = participant.character.name.replace(/\\s+/g, '-'); // Create a test-id friendly name\n        \n        return (\n          <ListItem\n            key={participant.id}\n            data-testid={`participant-item-${testIdName}`}\n            className={`\n              mb-2 rounded-lg transition-all duration-200\n              ${isCurrentTurn ? 'bg-blue-100 dark:bg-blue-900/30' : ''}\n              ${isSelected ? 'border-2 border-blue-500' : 'border border-gray-200 dark:border-gray-700'}\n              ${participant.isDefeated ? 'opacity-50' : ''}\n              cursor-pointer hover:bg-gray-100 dark:hover:bg-gray-800\n            `}\n            onClick={() => onSelectParticipant(participant.id)}\n          >\n            <div className=\"flex items-center w-full\">\n              {/* Character Avatar */}\n              <div className=\"relative mr-3\">\n                <Avatar\n                  src={participant.character.descriptionAssetName || undefined}\n                  alt={participant.character.name}\n                  className={`\n                    ${participant.isPlayerCharacter ? 'bg-green-100' : 'bg-red-100'}\n                    ${participant.isDefeated ? 'grayscale' : ''}\n                  `}\n                >\n                  {!participant.character.descriptionAssetName && participant.character.name.charAt(0)}\n                </Avatar>\n                <InitiativeBadge\n                  content={participant.initiative}\n                  color={participant.isPlayerCharacter ? 'primary' : 'error'}\n                />\n              </div>\n              \n              {/* Character Info */}\n              <div className=\"flex-grow\">\n                <div className=\"flex justify-between items-center\">\n                  <Typography variant=\"subtitle1\" className=\"font-semibold\">\n                    {participant.character.name}\n                    {isCurrentTurn && (\n                      <span className=\"ml-2 text-xs font-normal text-blue-600 dark:text-blue-400\">\n                        (Current Turn)\n                      </span>\n                    )}\n                  </Typography>\n                  \n                  {/* Health status */}\n                  <Box>\n                    <Chip \n                      label={`${participant.currentHp}/${participant.maxHp} HP`}\n                      color={\n                        participant.isDefeated \n                          ? 'error'\n                          : participant.currentHp / participant.maxHp < 0.3\n                            ? 'warning'\n                            : 'success'\n                      }\n                      size=\"small\"\n                      variant=\"outlined\"\n                    />\n                  </Box>\n                </div>\n                \n                {/* Additional information */}\n                <Typography variant=\"body2\" className=\"text-gray-600 dark:text-gray-300 truncate\">\n                  {participant.character.type} â€¢ {participant.isPlayerCharacter ? 'Player' : 'NPC'}\n                  {participant.isDefeated && <span className=\"ml-2 text-red-500\">Defeated</span>}\n                </Typography>\n              </div>\n            </div>\n          </ListItem>\n        );\n      })}\n    </List>\n  );\n}; ","import React, { useState, useEffect } from 'react';\nimport {\n  Card,\n  CardContent,\n  Typography,\n  Divider,\n  TextField, \n  IconButton,\n  Button,\n  Grid,\n  Tooltip\n} from '../../../components/ui';\nimport { CloseIcon, EditIcon, SaveIcon, DeleteIcon, DownloadIcon } from '../../../assets/icons';\nimport MarkdownContent from '../../../components/MarkdownContent';\nimport { CombatParticipant } from '../hooks/useCombatSession';\n\nexport interface CombatParticipantDetailsProps {\n  participant: CombatParticipant;\n  onUpdateHp: (participantId: string, hp: number) => void;\n  onUpdateNotes: (participantId: string, notes: string) => void;\n  onRemoveParticipant: (participantId: string) => void;\n  onUpdateInitiative: (participantId: string, initiative: number) => void;\n  isEditing: boolean;\n  onSetEditing: (isEditing: boolean) => void;\n  onViewDescription?: () => void;\n}\n\n/**\n * Displays detailed information about a selected combat participant\n * with directly editable controls for stats and notes\n */\nexport const CombatParticipantDetails: React.FC<CombatParticipantDetailsProps> = ({\n  participant,\n  onUpdateHp,\n  onUpdateNotes,\n  onRemoveParticipant,\n  onUpdateInitiative,\n  isEditing,\n  onSetEditing,\n  onViewDescription\n}) => {\n  const [localHp, setLocalHp] = useState<number>(participant.currentHp);\n  const [localInitiative, setLocalInitiative] = useState<number>(participant.initiative);\n  const [localNotes, setLocalNotes] = useState<string>(participant.notes || '');\n  \n  const isDefeated = participant.isDefeated;\n  const { character } = participant;\n  const hasAsset = character.descriptionAssetName && \n                  (character.descriptionType === 'pdf' || character.descriptionType === 'image');\n  \n  useEffect(() => {\n    setLocalHp(participant.currentHp);\n    setLocalInitiative(participant.initiative);\n    setLocalNotes(participant.notes || '');\n  }, [participant]);\n  \n  const handleSave = () => {\n    onUpdateHp(participant.id, localHp);\n    onUpdateInitiative(participant.id, localInitiative);\n    onUpdateNotes(participant.id, localNotes);\n    onSetEditing(false);\n  };\n  \n  const handleCancel = () => {\n    setLocalHp(participant.currentHp);\n    setLocalInitiative(participant.initiative);\n    setLocalNotes(participant.notes || '');\n    onSetEditing(false);\n  };\n  \n  return (\n    <div className=\"h-full flex flex-col overflow-auto p-3\">\n      <div className=\"flex justify-between items-center mb-3\">\n        <div className=\"flex items-center\">\n          <h2 className={`font-display text-base font-semibold ${isDefeated ? 'line-through text-red-500' : ''}`}>\n            {character.name}\n            {character.type && (\n              <span className=\"ml-2 text-xs opacity-70\">\n                ({character.type})\n              </span>\n            )}\n          </h2>\n          \n          {/* Edit and view PDF buttons */}\n          <div className=\"flex ml-2\">\n            {hasAsset && onViewDescription && (\n              <Tooltip \n                title={`View ${character.descriptionType?.toUpperCase() || 'Document'}`}\n                placement=\"top\"\n              >\n                <IconButton\n                  onClick={onViewDescription}\n                  aria-label={`View ${character.descriptionType || 'document'}`}\n                  className=\"text-primary-light mr-1\"\n                >\n                  <DownloadIcon className=\"w-4 h-4\" />\n                </IconButton>\n              </Tooltip>\n            )}\n            \n            {!isEditing && (\n              <IconButton\n                onClick={() => onSetEditing(true)}\n                aria-label=\"Edit\"\n              >\n                <EditIcon className=\"w-4 h-4\" />\n              </IconButton>\n            )}\n          </div>\n        </div>\n        \n        <div className=\"flex items-center\">\n          {isEditing ? (\n            <>\n              <Button\n                variant=\"text\"\n                color=\"error\"\n                onPress={handleCancel}\n                className=\"text-xs mr-2\"\n              >\n                Cancel\n              </Button>\n              <Button\n                variant=\"contained\"\n                color=\"primary\"\n                onPress={handleSave}\n                className=\"text-xs\"\n                startIcon={<SaveIcon className=\"w-3 h-3\" />}\n              >\n                Save\n              </Button>\n            </>\n          ) : (\n            <>\n              {hasAsset && onViewDescription && (\n                <Button\n                  variant=\"outlined\"\n                  color=\"primary\"\n                  onPress={onViewDescription}\n                  className=\"text-xs mr-2\"\n                >\n                  View {character.descriptionType === 'pdf' ? 'PDF' : 'Image'}\n                </Button>\n              )}\n              <Button\n                variant=\"outlined\"\n                color=\"error\"\n                onPress={() => onRemoveParticipant(participant.id)}\n                className=\"text-xs\"\n                startIcon={<CloseIcon className=\"w-3 h-3\" />}\n              >\n                Remove\n              </Button>\n            </>\n          )}\n        </div>\n      </div>\n      \n      <Grid container spacing={2} className=\"mb-4\">\n        <Grid item xs={4}>\n          <Card className=\"p-3 h-full\">\n            <Typography variant=\"subtitle2\" className=\"font-semibold mb-1\">HP</Typography>\n            {isEditing ? (\n              <TextField\n                value={localHp.toString()}\n                onChange={(e: any) => setLocalHp(parseInt(e.target.value) || 0)}\n                onBlur={() => onUpdateHp(participant.id, localHp)}\n                type=\"number\"\n                size=\"small\"\n                fullWidth\n              />\n            ) : (\n              <div className=\"flex items-baseline\">\n                <span className={`text-lg font-bold ${participant.currentHp <= 0 ? 'text-red-500' : ''}`}>{participant.currentHp}</span>\n                <span className=\"text-xs opacity-60 ml-1\">/ {participant.maxHp}</span>\n              </div>\n            )}\n          </Card>\n        </Grid>\n        \n        <Grid item xs={4}>\n          <Card className=\"p-3 h-full\">\n            <Typography variant=\"subtitle2\" className=\"font-semibold mb-1\">Initiative</Typography>\n            {isEditing ? (\n              <TextField\n                value={localInitiative.toString()}\n                onChange={(e: any) => setLocalInitiative(parseInt(e.target.value) || 0)}\n                onBlur={() => onUpdateInitiative(participant.id, localInitiative)}\n                type=\"number\"\n                size=\"small\"\n                fullWidth\n              />\n            ) : (\n              <span className=\"text-lg font-bold\">{participant.initiative}</span>\n            )}\n          </Card>\n        </Grid>\n        \n        <Grid item xs={4}>\n          <Card className=\"p-3 h-full\">\n            <Typography variant=\"subtitle2\" className=\"font-semibold mb-1\">Type</Typography>\n            <span className=\"text-base\">\n              {participant.isPlayerCharacter ? 'PC' : 'NPC'}\n            </span>\n          </Card>\n        </Grid>\n      </Grid>\n      \n      <div className=\"flex-grow overflow-auto\">\n        <Card className=\"p-4 mb-4\">\n          <Typography variant=\"subtitle2\" className=\"font-semibold mb-2\">Notes</Typography>\n          {isEditing ? (\n            <TextField\n              value={localNotes}\n              onChange={(e: any) => {\n                setLocalNotes(e.target.value);\n                onUpdateNotes(participant.id, e.target.value);\n              }}\n              fullWidth\n              InputProps={{\n                inputProps: { style: { minHeight: '100px' } }\n              }}\n            />\n          ) : (\n            <div className=\"text-sm whitespace-pre-wrap\">\n              {participant.notes || <span className=\"opacity-50 italic\">No notes</span>}\n            </div>\n          )}\n        </Card>\n        \n        {character.description && (\n          <Card className=\"p-4\">\n            <div className=\"flex justify-between items-center mb-2\">\n              <Typography variant=\"subtitle2\" className=\"font-semibold\">Description</Typography>\n              {onViewDescription && (\n                <Button \n                  size=\"small\" \n                  variant=\"outlined\" \n                  color=\"primary\"\n                  className=\"text-xs\"\n                  onPress={onViewDescription}\n                >\n                  View full description\n                </Button>\n              )}\n            </div>\n            <div className=\"description-preview max-h-48 overflow-y-auto\">\n              <MarkdownContent content={character.description} />\n            </div>\n          </Card>\n        )}\n      </div>\n    </div>\n  );\n}; ","import React, { useState, useEffect } from 'react';\nimport { \n  Dialog, \n  DialogTitle, \n  DialogContent, \n  DialogActions, \n  Button, \n  TextField,\n  Box,\n  Divider,\n  Typography,\n  Card\n} from '../../../components/ui';\nimport { Character } from '../../../store';\nimport { Combobox } from '@headlessui/react';\n\ninterface AddParticipantDialogProps {\n  open: boolean;\n  onClose: () => void;\n  onAddParticipant: (characterId: string, initiative: number, isPlayerCharacter: boolean) => void;\n  characters: Character[];\n}\n\n/**\n * Dialog component for adding a new participant to combat\n */\nexport const AddParticipantDialog: React.FC<AddParticipantDialogProps> = ({\n  open,\n  onClose,\n  onAddParticipant,\n  characters\n}) => {\n  // State for form values\n  const [selectedCharacterId, setSelectedCharacterId] = useState('');\n  const [searchQuery, setSearchQuery] = useState('');\n  const [selectedCharacter, setSelectedCharacter] = useState<Character | null>(null);\n  \n  // Group characters by type for better organization\n  const groupedCharacters = React.useMemo(() => {\n    const groups: { [key: string]: Character[] } = {\n      player: [],\n      enemy: [],\n      npc: [],\n      other: []\n    };\n    \n    characters.forEach(character => {\n      const type = character.type || 'other';\n      if (groups[type]) {\n        groups[type].push(character);\n      } else {\n        groups.other.push(character);\n      }\n    });\n    \n    return groups;\n  }, [characters]);\n  \n  // Filter characters based on search query\n  const filteredCharacters = searchQuery\n    ? characters.filter(character => \n        character.name.toLowerCase().includes(searchQuery.toLowerCase()))\n    : characters;\n  \n  // Update selected character when ID changes\n  useEffect(() => {\n    if (selectedCharacterId) {\n      const character = characters.find(c => c.id === selectedCharacterId);\n      setSelectedCharacter(character || null);\n    } else {\n      setSelectedCharacter(null);\n    }\n  }, [selectedCharacterId, characters]);\n  \n  // Handle form submission - no longer needed as we directly use the Add Character button\n  const handleAddCharacter = () => {\n    if (!selectedCharacterId || !selectedCharacter) return;\n    const isPlayerCharacter = selectedCharacter.type === 'player';\n    \n    // Initiative will be set in the next dialog\n    onAddParticipant(selectedCharacterId, 0, isPlayerCharacter);\n    resetForm();\n    onClose();\n  };\n  \n  // Reset form values\n  const resetForm = () => {\n    setSelectedCharacterId('');\n    setSearchQuery('');\n    setSelectedCharacter(null);\n  };\n  \n  // Handle dialog close\n  const handleClose = () => {\n    resetForm();\n    onClose();\n  };\n  \n  // Handle character selection\n  const handleCharacterChange = (value: string | null) => {\n    setSelectedCharacterId(value || '');\n  };\n  \n  // Render character group with heading\n  const renderCharacterGroup = (title: string, charactersInGroup: Character[]) => {\n    if (!charactersInGroup.length) return null;\n    \n    return (\n      <div className=\"mb-2\">\n        <Typography variant=\"subtitle2\" className=\"text-xs font-semibold uppercase text-text-secondary px-3 py-1\">\n          {title}\n        </Typography>\n        {charactersInGroup.map(character => (\n          <Combobox.Option\n            key={character.id}\n            value={character.id}\n            className={({ active }) =>\n              `cursor-pointer select-none relative py-2 pl-3 pr-9 ${\n                active ? 'bg-blue-100 dark:bg-blue-900/40' : ''\n              }`\n            }\n          >\n            {({ selected, active }) => (\n              <Box className={`flex items-center ${selected ? 'font-semibold' : ''}`}>\n                <Box \n                  className={`w-3 h-3 rounded-full mr-2 ${\n                    character.type === 'player' \n                      ? 'bg-green-500' \n                      : character.type === 'enemy' \n                        ? 'bg-red-500'\n                        : 'bg-yellow-500'\n                  }`} \n                />\n                <span className={active ? 'text-blue-700 dark:text-blue-300' : ''}>{character.name}</span>\n                <span className=\"ml-2 text-xs text-gray-500 dark:text-gray-400\">\n                  {character.type}\n                </span>\n                {selected && (\n                  <span className=\"absolute inset-y-0 right-0 flex items-center pr-3\">\n                    <svg className=\"h-5 w-5 text-primary\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\n                      <path fillRule=\"evenodd\" clipRule=\"evenodd\" d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\" />\n                    </svg>\n                  </span>\n                )}\n              </Box>\n            )}\n          </Combobox.Option>\n        ))}\n      </div>\n    );\n  };\n  \n  return (\n    <Dialog open={open} onClose={handleClose} fullWidth maxWidth=\"sm\">\n      <DialogTitle>\n        <Typography variant=\"h6\" className=\"font-display\">\n          Add Combat Participant\n        </Typography>\n      </DialogTitle>\n      <DialogContent>\n        <div className=\"mb-4\">\n          <Typography variant=\"body2\" className=\"mb-2\">\n            Select a character to add to the combat:\n          </Typography>\n          \n          <Combobox value={selectedCharacterId} onChange={handleCharacterChange}>\n            <div className=\"relative\">\n              <div className=\"flex items-center border border-gray-300 dark:border-gray-700 rounded-md p-2\">\n                <Combobox.Input\n                  className=\"w-full bg-transparent border-none focus:outline-none dark:text-white\"\n                  placeholder=\"Search for a character...\"\n                  displayValue={(id: string) => {\n                    const character = characters.find(c => c.id === id);\n                    return character ? character.name : '';\n                  }}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                />\n                <svg className=\"h-5 w-5 text-gray-400\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z\" />\n                </svg>\n              </div>\n              \n              <Combobox.Options className=\"absolute z-10 mt-1 w-full bg-white dark:bg-gray-800 shadow-lg max-h-60 rounded-md py-1 text-base overflow-auto\">\n                {searchQuery ? (\n                  // Show flat list when searching\n                  filteredCharacters.length > 0 ? (\n                    filteredCharacters.map((character) => (\n                      <Combobox.Option\n                        key={character.id}\n                        value={character.id}\n                        className={({ active }) =>\n                          `cursor-pointer select-none relative py-2 pl-3 pr-9 ${\n                            active ? 'bg-blue-100 dark:bg-blue-900/40' : ''\n                          }`\n                        }\n                      >\n                        {({ selected, active }) => (\n                          <Box className={`flex items-center ${selected ? 'font-semibold' : ''}`}>\n                            <Box \n                              className={`w-3 h-3 rounded-full mr-2 ${\n                                character.type === 'player' \n                                  ? 'bg-green-500' \n                                  : character.type === 'enemy' \n                                    ? 'bg-red-500'\n                                    : 'bg-yellow-500'\n                              }`} \n                            />\n                            <span className={active ? 'text-blue-700 dark:text-blue-300' : ''}>{character.name}</span>\n                            <span className=\"ml-2 text-xs text-gray-500 dark:text-gray-400\">\n                              ({character.type})\n                            </span>\n                          </Box>\n                        )}\n                      </Combobox.Option>\n                    ))\n                  ) : (\n                    <div className=\"p-4 text-center text-gray-500\">\n                      No characters found\n                    </div>\n                  )\n                ) : (\n                  // Show grouped list when not searching\n                  <>\n                    {renderCharacterGroup('Player Characters', groupedCharacters.player)}\n                    {renderCharacterGroup('Enemies', groupedCharacters.enemy)}\n                    {renderCharacterGroup('NPCs', groupedCharacters.npc)}\n                    {renderCharacterGroup('Other', groupedCharacters.other)}\n                  </>\n                )}\n              </Combobox.Options>\n            </div>\n          </Combobox>\n        </div>\n        \n        {selectedCharacter && (\n          <Card className=\"p-3 mt-4 bg-background-surface/30\">\n            <Typography variant=\"subtitle1\" className=\"font-semibold mb-2\">\n              Selected Character:\n            </Typography>\n            <div className=\"flex items-center mb-2\">\n              <Box \n                className={`w-3 h-3 rounded-full mr-2 ${\n                  selectedCharacter.type === 'player' \n                    ? 'bg-green-500' \n                    : selectedCharacter.type === 'enemy' \n                      ? 'bg-red-500'\n                      : 'bg-yellow-500'\n                }`} \n              />\n              <Typography variant=\"body1\" className=\"font-medium\">\n                {selectedCharacter.name}\n              </Typography>\n              <Typography variant=\"caption\" className=\"ml-2 text-text-secondary\">\n                ({selectedCharacter.type || 'Character'})\n              </Typography>\n            </div>\n            <Typography variant=\"body2\" className=\"text-text-secondary\">\n              HP: {selectedCharacter.hp || 10}\n            </Typography>\n          </Card>\n        )}\n        \n        <Typography variant=\"body2\" className=\"text-text-secondary mt-4\">\n          Note: After adding, you'll be prompted to set the participant's initiative.\n        </Typography>\n      </DialogContent>\n      \n      <DialogActions>\n        <Button onPress={handleClose} variant=\"outlined\">Cancel</Button>\n        <Button \n          onPress={handleAddCharacter}\n          variant=\"contained\" \n          color=\"primary\"\n          isDisabled={!selectedCharacterId}\n        >\n          Add to Combat\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n}; ","import React, { useState, useEffect } from 'react';\nimport { \n  Dialog, \n  DialogTitle, \n  DialogContent, \n  DialogActions,\n  Typography,\n  Button,\n  TextField,\n  Select,\n  Box,\n  Card,\n  Divider,\n  IconButton\n} from '../../../components/ui';\nimport { CombatParticipant } from '../hooks/useCombatSession';\n\nexport interface InitiativeDialogProps {\n  open: boolean;\n  onClose: () => void;\n  participants: CombatParticipant[];\n  onComplete: (updatedParticipants: CombatParticipant[]) => void;\n  title?: string;\n  isSingleParticipant?: boolean;\n  onViewCharacterDetails?: (participant: CombatParticipant) => void;\n}\n\ninterface DiceOption {\n  label: string;\n  value: string;\n  description: string;\n}\n\nconst DICE_OPTIONS: DiceOption[] = [\n  { label: '', value: 'd20', description: '1d20 (avg: 10.5)' },\n  { label: '', value: 'd12', description: '1d12 (avg: 6.5)' },\n  { label: '', value: 'd10', description: '1d10 (avg: 5.5)' },\n  { label: '', value: 'd8', description: '1d8 (avg: 4.5)' },\n  { label: '', value: 'd6', description: '1d6 (avg: 3.5)' },\n  { label: '', value: 'd4', description: '1d4 (avg: 2.5)' },\n];\n\n/**\n * Dialog for setting initiative values for all participants at the start of combat\n * or for a single new participant\n */\nexport const InitiativeDialog: React.FC<InitiativeDialogProps> = ({\n  open,\n  onClose,\n  participants,\n  onComplete,\n  title = 'Set Initiative',\n  isSingleParticipant = false,\n  onViewCharacterDetails\n}) => {\n  // Clone participants array to make modifications - use useEffect to update when props change\n  const [localParticipants, setLocalParticipants] = useState<CombatParticipant[]>([]);\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const [initiativeValue, setInitiativeValue] = useState('');\n  const [diceOption, setDiceOption] = useState<string>('d20');\n  const [bonusValue, setBonusValue] = useState('0');\n  \n  // Update local state when props change\n  useEffect(() => {\n    if (open && participants && participants.length > 0) {\n      setLocalParticipants([...participants]);\n      setCurrentIndex(0);\n    }\n  }, [open, participants]);\n  \n  // Current participant being configured\n  const currentParticipant = localParticipants[currentIndex];\n  const isLastParticipant = currentIndex === localParticipants.length - 1;\n  \n  // Roll random initiative using selected dice\n  const rollInitiative = () => {\n    let result = 0;\n    \n    switch (diceOption) {\n      case 'd20':\n        result = Math.floor(Math.random() * 20) + 1;\n        break;\n      case 'd12':\n        result = Math.floor(Math.random() * 12) + 1;\n        break;\n      case 'd10':\n        result = Math.floor(Math.random() * 10) + 1;\n        break;\n      case 'd8':\n        result = Math.floor(Math.random() * 8) + 1;\n        break;\n      case 'd6':\n        result = Math.floor(Math.random() * 6) + 1;\n        break;\n      case 'd4':\n        result = Math.floor(Math.random() * 4) + 1;\n        break;\n      default:\n        result = Math.floor(Math.random() * 20) + 1;\n    }\n    \n    // Add bonus\n    const bonus = parseInt(bonusValue) || 0;\n    result += bonus;\n    \n    // Debug log\n    console.log(`Rolled initiative: ${result} (${diceOption} + ${bonus})`);\n    \n    // Ensure we never return 0 as initiative\n    return Math.max(1, result);\n  };\n  \n  // Set manual initiative value\n  const setManualInitiative = (value: string) => {\n    setInitiativeValue(value);\n  };\n  \n  // Apply current initiative setting and move to next participant\n  const applyCurrentInitiative = () => {\n    if (!currentParticipant) return;\n    \n    const initiativeNum = initiativeValue ? parseInt(initiativeValue) : rollInitiative();\n    \n    // Debug log\n    console.log(`Setting initiative for ${currentParticipant.character.name} to ${initiativeNum}`);\n    \n    // Create a deep copy of the participants array to prevent reference issues\n    const updatedParticipants = JSON.parse(JSON.stringify(localParticipants));\n    updatedParticipants[currentIndex] = {\n      ...updatedParticipants[currentIndex],\n      initiative: initiativeNum\n    };\n    \n    setLocalParticipants(updatedParticipants);\n    setInitiativeValue('');\n    \n    if (isLastParticipant) {\n      // Final debug log\n      console.log(\"All initiatives set:\", updatedParticipants.map((p: CombatParticipant) => \n        `${p.character.name}: ${p.initiative}`\n      ));\n      \n      // Sort by initiative and complete\n      const sortedParticipants = [...updatedParticipants].sort((a, b) => \n        b.initiative - a.initiative\n      );\n      onComplete(sortedParticipants);\n    } else {\n      setCurrentIndex(currentIndex + 1);\n    }\n  };\n  \n  // Apply quick roll using selected dice and bonus\n  const quickRoll = () => {\n    if (!currentParticipant) return;\n    \n    const result = rollInitiative();\n    console.log(`Quick roll result for ${currentParticipant.character.name}: ${result}`);\n    \n    // Create a deep copy of the participants array to prevent reference issues\n    const updatedParticipants = JSON.parse(JSON.stringify(localParticipants));\n    updatedParticipants[currentIndex] = {\n      ...updatedParticipants[currentIndex],\n      initiative: result\n    };\n    \n    setLocalParticipants(updatedParticipants);\n    \n    if (isLastParticipant) {\n      // Final debug log\n      console.log(\"All initiatives set:\", updatedParticipants.map((p: CombatParticipant) => \n        `${p.character.name}: ${p.initiative}`\n      ));\n      \n      // Sort by initiative and complete\n      const sortedParticipants = [...updatedParticipants].sort((a, b) => \n        b.initiative - a.initiative\n      );\n      onComplete(sortedParticipants);\n    } else {\n      setCurrentIndex(currentIndex + 1);\n    }\n  };\n  \n  // Immediately complete with random initiative for all\n  const rollAllRandom = () => {\n    console.log(\"Rolling for all participants\");\n    \n    // Create a deep copy of the participants array to prevent reference issues\n    const updatedParticipants = JSON.parse(JSON.stringify(localParticipants));\n    \n    // Set initiative for each participant\n    updatedParticipants.forEach((participant: any, idx: number) => {\n      const initiativeRoll = rollInitiative();\n      console.log(`Rolling for ${participant.character.name}: ${initiativeRoll}`);\n      updatedParticipants[idx].initiative = initiativeRoll;\n    });\n    \n    // Sort by initiative\n    const sortedParticipants = [...updatedParticipants].sort((a, b) => \n      b.initiative - a.initiative\n    );\n    \n    console.log(\"Final initiative order:\", sortedParticipants.map((p: CombatParticipant) => \n      `${p.character.name}: ${p.initiative}`\n    ));\n    \n    // Update the full list at once\n    onComplete(sortedParticipants);\n  };\n  \n  // Cancel and close dialog\n  const handleCancel = () => {\n    setLocalParticipants([]);\n    setCurrentIndex(0);\n    setInitiativeValue('');\n    onClose();\n  };\n  \n  // Display message if no participants available\n  if (open && (!localParticipants || localParticipants.length === 0)) {\n    return (\n      <Dialog open={open} onClose={handleCancel} fullWidth maxWidth=\"sm\">\n        <DialogTitle>{title}</DialogTitle>\n        <DialogContent>\n          <Box className=\"p-4 text-center\">\n            <Typography>\n              No participants available to set initiative.\n            </Typography>\n          </Box>\n        </DialogContent>\n        <DialogActions>\n          <Button onPress={handleCancel}>Close</Button>\n        </DialogActions>\n      </Dialog>\n    );\n  }\n  \n  return (\n    <Dialog open={open} onClose={handleCancel} fullWidth maxWidth=\"sm\">\n      <DialogTitle>{title}</DialogTitle>\n      \n      <DialogContent>\n        {currentParticipant ? (\n          <Box className=\"mb-4\">\n            <Typography variant=\"h6\" className=\"mb-2\">\n              {isSingleParticipant \n                ? \"Set Initiative\" \n                : `${currentIndex + 1}/${localParticipants.length}: Set Initiative`}\n            </Typography>\n            \n            <Card className=\"p-4 mb-4\">\n              <Box className=\"flex justify-between items-center mb-2\">\n                <Box className=\"flex items-center\">\n                  <Typography variant=\"subtitle1\" className=\"font-semibold mr-2\">\n                    {currentParticipant.character.name}\n                  </Typography>\n                  <Typography variant=\"body2\" className=\"text-text-secondary\">\n                    ({currentParticipant.isPlayerCharacter ? 'Player Character' : 'NPC'})\n                  </Typography>\n                </Box>\n                \n                {onViewCharacterDetails && (\n                  <Button \n                    variant=\"outlined\" \n                    size=\"small\"\n                    color=\"primary\"\n                    className=\"text-xs\"\n                    onPress={() => onViewCharacterDetails(currentParticipant)}\n                  >\n                    View Details\n                  </Button>\n                )}\n              </Box>\n              \n              <Typography variant=\"body2\" className=\"text-text-secondary mb-2\">\n                Type: {currentParticipant.character.type || (currentParticipant.isPlayerCharacter ? 'player' : 'enemy')}\n              </Typography>\n            </Card>\n            \n            <Typography variant=\"subtitle2\" className=\"mb-2\">\n              Initiative Options\n            </Typography>\n            \n            <Box className=\"mb-4\">\n              <Typography variant=\"body2\" className=\"mb-2\">\n                Enter specific value:\n              </Typography>\n              <Box className=\"flex gap-2\">\n                <TextField\n                  value={initiativeValue}\n                  onChange={setManualInitiative}\n                  placeholder=\"Initiative value\"\n                  type=\"number\"\n                  className=\"flex-1\"\n                />\n                <Button \n                  variant=\"contained\" \n                  color=\"primary\"\n                  onPress={applyCurrentInitiative}\n                  isDisabled={!initiativeValue}\n                >\n                  Apply\n                </Button>\n              </Box>\n            </Box>\n            \n            <Divider className=\"my-4\" />\n            \n            <Typography variant=\"body2\" className=\"mb-2\">\n              Or roll random initiative:\n            </Typography>\n            \n            <Box className=\"grid grid-cols-2 gap-4 mb-4\">\n              <Box>\n                <Typography variant=\"caption\" className=\"block mb-1\">\n                  Dice Type\n                </Typography>\n                <select \n                  value={diceOption}\n                  onChange={(e) => setDiceOption(e.target.value)}\n                  className=\"block w-full p-2 border border-gray-300 rounded-md bg-background-input dark:bg-gray-800 dark:border-gray-700 dark:text-gray-200\"\n                >\n                  {DICE_OPTIONS.map(option => (\n                    <option key={option.value} value={option.value} className=\"dark:bg-gray-800 dark:text-white\">\n                      {option.description}\n                    </option>\n                  ))}\n                </select>\n              </Box>\n              \n              <Box>\n                <Typography variant=\"caption\" className=\"block mb-1\">\n                  Bonus\n                </Typography>\n                <TextField\n                  value={bonusValue}\n                  onChange={setBonusValue}\n                  type=\"number\"\n                  className=\"w-full\"\n                />\n              </Box>\n            </Box>\n            \n            <Button \n              variant=\"contained\" \n              color=\"primary\"\n              className=\"w-full\"\n              onPress={quickRoll}\n            >\n              Roll and Continue\n            </Button>\n            \n            {!isSingleParticipant && currentIndex === 0 && (\n              <Box className=\"mt-4\">\n                <Button \n                  variant=\"outlined\" \n                  color=\"secondary\"\n                  className=\"w-full\"\n                  onPress={rollAllRandom}\n                >\n                  Quick Mode: Roll for All Participants and Start\n                </Button>\n              </Box>\n            )}\n          </Box>\n        ) : (\n          <Box className=\"p-4 text-center\">\n            <Typography>\n              Loading participant data...\n            </Typography>\n          </Box>\n        )}\n      </DialogContent>\n      \n      <DialogActions>\n        <Button onPress={handleCancel}>Cancel</Button>\n      </DialogActions>\n    </Dialog>\n  );\n}; ","import { useState, useEffect, useRef } from 'react';\nimport { useNavigate, useLocation } from 'react-router-dom';\nimport { useStore } from '../../../store';\nimport { Combat, Character } from '../../../store';\nimport { useAudioPlayer } from '../../audio/hooks/useAudioPlayer';\n\n/**\n * Interface for combat participants with initiative\n */\nexport interface CombatParticipant {\n  id: string;\n  character: Character;\n  initiative: number;\n  currentHp: number;\n  maxHp: number;\n  notes: string;\n  isPlayerCharacter: boolean;\n  isDefeated?: boolean;\n}\n\n/**\n * Custom hook that manages the state and logic for an active combat session\n * \n * @returns Combat session state and functions\n */\nexport const useCombatSession = () => {\n  const navigate = useNavigate();\n  const location = useLocation();\n  const { \n    combats,\n    characters,\n    isCombatAudioInitialized,\n    markCombatAudioInitialized,\n    resetCombatAudioInitialized\n  } = useStore();\n  \n  // Get audio functions from the hook\n  const { play, stopLocationTracks } = useAudioPlayer();\n  \n  // Get the combat ID from the URL search params (e.g., ?id=123)\n  const searchParams = new URLSearchParams(location.search);\n  const combatId = searchParams.get('id');\n  \n  // Find the combat by ID\n  const combat = combats.find(c => c.id === combatId);\n  \n  // Combat state\n  const [participants, setParticipants] = useState<CombatParticipant[]>([]);\n  const [currentTurnIndex, setCurrentTurnIndex] = useState(0);\n  const [round, setRound] = useState(1);\n  const [editingParticipantId, setEditingParticipantId] = useState<string | null>(null);\n  const [selectedParticipantId, setSelectedParticipantId] = useState<string | null>(null);\n  \n  // Effect run counter for debugging\n  const effectRunCounter = useRef(0);\n  \n  // If no combat is found, redirect back to combats view\n  useEffect(() => {\n    if (!combatId || !combat) {\n      console.warn('useCombatSession: No valid combat found, redirecting.');\n      navigate('/combats');\n    }\n  }, [combatId, combat, navigate]);\n  \n  // Initialize audio when component mounts - using store state instead of ref for initialization tracking\n  useEffect(() => {\n    if (!combatId) return; // Exit early if no combatId\n    \n    effectRunCounter.current += 1;\n    const runCount = effectRunCounter.current;\n    console.log(`useCombatSession AUDIO EFFECT RUN #${runCount} (Deps: combatId=${combatId})`);\n\n    // Get current combat using the stable ID\n    const currentCombats = useStore.getState().combats;\n    const currentCombat = currentCombats.find(c => c.id === combatId);\n\n    // Check if audio is already initialized for this combat using the store state\n    const isInitialized = useStore.getState().isCombatAudioInitialized(combatId);\n\n    // Guard effect execution: Only run once per combat instance\n    if (currentCombat && !isInitialized) {\n      // Mark combat as initialized FIRST using store function \n      useStore.getState().markCombatAudioInitialized(combatId);\n      \n      const combatLocationIdPrefix = `combat-${currentCombat.id}`;\n      console.log(`RUN #${runCount}: Initializing audio for combat ID: ${currentCombat.id}, prefix: ${combatLocationIdPrefix}`); \n      \n      // Stop any potentially lingering audio from the *map* location \n      if (currentCombat.locationId) {\n         console.log(`RUN #${runCount}: Stopping previous map location tracks for ${currentCombat.locationId}`);\n         stopLocationTracks(currentCombat.locationId); \n      }\n            \n      // Play entry sound (replace any previous entry sound for this *combat*)\n      if (currentCombat.entrySound) {\n        console.log(`RUN #${runCount}: Playing combat entry sound ${currentCombat.entrySound}`);\n        play(currentCombat.entrySound, { \n          replace: true,\n          locationId: `${combatLocationIdPrefix}-entry`, \n          loop: false \n        });\n      }\n      \n      // Play background music (replace any previous BGM for this *combat*)\n      if (currentCombat.backgroundMusic) {\n        console.log(`RUN #${runCount}: Playing combat BGM ${currentCombat.backgroundMusic}`);\n        play(currentCombat.backgroundMusic, { \n          replace: true,\n          locationId: `${combatLocationIdPrefix}-bgm`, \n          loop: true \n        });\n      }\n      \n      console.log(`RUN #${runCount}: Initialization block finished.`);\n    } else {\n      // Log why the initialization block was skipped\n      if (!currentCombat) {\n        console.log(`RUN #${runCount}: SKIPPED audio init (combat object not found for ID: ${combatId})`);\n      } else if (isInitialized) {\n        console.log(`RUN #${runCount}: SKIPPED audio init (already initialized for combat ID: ${currentCombat.id})`);\n      }\n    }\n    \n    // Cleanup function: Stop *only* combat-specific audio when leaving\n    return () => {\n      if (!combatId) return;\n      \n      console.log(`useCombatSession AUDIO EFFECT CLEANUP #${runCount} for combat ID: ${combatId}`);\n      \n      // Only stop audio if we're really unmounting (component is being removed from DOM)\n      // We detect this by checking if the combat ID still exists in the URL\n      const currentSearchParams = new URLSearchParams(window.location.search);\n      const currentCombatId = currentSearchParams.get('id');\n      \n      if (currentCombatId !== combatId) {\n        // We're actually navigating away from this combat - reset state and stop audio\n        const combatLocationIdPrefix = `combat-${combatId}`;\n        console.log(`CLEANUP #${runCount}: Cleaning up audio for ${combatLocationIdPrefix}`);\n        \n        // Stop all combat-related audio\n        stopLocationTracks(combatLocationIdPrefix);\n        \n        // Reset initialization flag in the store when actually leaving combat\n        resetCombatAudioInitialized(combatId);\n      } else {\n        console.log(`CLEANUP #${runCount}: Skipped cleanup (not actually leaving combat)`);\n      }\n    };\n    // Only depend on stable values\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [combatId, play, stopLocationTracks]);\n  \n  // Initialize combat participants\n  useEffect(() => {\n    if (combat) {\n      initializeCombat();\n    }\n  }, [combat]);\n  \n  // Current participant (whose turn it is)\n  const currentParticipant = participants[currentTurnIndex];\n  \n  // Selected participant (for details panel)\n  const selectedParticipant = participants.find(p => p.id === (selectedParticipantId || currentParticipant?.id));\n  \n  // Update selectedParticipantId when current turn changes\n  useEffect(() => {\n    if (currentParticipant && !selectedParticipantId) {\n      setSelectedParticipantId(currentParticipant.id);\n    }\n  }, [currentParticipant, selectedParticipantId]);\n  \n  // Initialize combat participants from combat data\n  const initializeCombat = () => {\n    if (!combat) return;\n    \n    // Create participants from player characters\n    const playerParticipants = combat.playerCharacters.map((pc: { id: string }) => {\n      const character = characters.find(c => c.id === pc.id);\n      if (!character) return null;\n      \n      return {\n        id: `pc-${character.id}-${Math.random().toString(36).substring(2, 9)}`,\n        character,\n        initiative: 0,\n        currentHp: character.hp || 10,\n        maxHp: character.hp || 10,\n        notes: '',\n        isPlayerCharacter: true\n      };\n    }).filter(Boolean) as CombatParticipant[];\n    \n    // Create participants from enemies\n    const enemyParticipants = combat.enemies.map((enemy: { id: string }) => {\n      const character = characters.find(c => c.id === enemy.id);\n      if (!character) return null;\n      \n      return {\n        id: `enemy-${character.id}-${Math.random().toString(36).substring(2, 9)}`,\n        character,\n        initiative: Math.floor(Math.random() * 20) + 1, // Random initiative for initial setup\n        currentHp: character.hp || 10,\n        maxHp: character.hp || 10,\n        notes: '',\n        isPlayerCharacter: false\n      };\n    }).filter(Boolean) as CombatParticipant[];\n    \n    // Combine and sort by initiative\n    const allParticipants = [...playerParticipants, ...enemyParticipants]\n      .sort((a, b) => b.initiative - a.initiative);\n    \n    setParticipants(allParticipants);\n    setCurrentTurnIndex(0); // Start with the highest initiative\n    setRound(1);\n  };\n\n  // Move to the next turn\n  const nextTurn = () => {\n    if (participants.length === 0) return;\n    \n    const nextIndex = (currentTurnIndex + 1) % participants.length;\n    setCurrentTurnIndex(nextIndex);\n    \n    // When turn changes, update selected participant\n    setSelectedParticipantId(participants[nextIndex].id);\n    \n    // If we've looped back to the first participant, increment the round\n    if (nextIndex === 0) {\n      setRound(prevRound => prevRound + 1);\n    }\n  };\n  \n  // Add a new participant to combat\n  const addParticipant = (characterId: string, initiative: number, isPlayerCharacter: boolean) => {\n    const character = characters.find(c => c.id === characterId);\n    if (!character) return;\n    \n    const newParticipant: CombatParticipant = {\n      id: `${isPlayerCharacter ? 'pc' : 'enemy'}-${character.id}-${Math.random().toString(36).substring(2, 9)}`,\n      character,\n      initiative,\n      currentHp: character.hp || 10,\n      maxHp: character.hp || 10,\n      notes: '',\n      isPlayerCharacter\n    };\n    \n    // Add to participants and sort by initiative\n    const newParticipants = [...participants, newParticipant]\n      .sort((a, b) => b.initiative - a.initiative);\n    \n    setParticipants(newParticipants);\n    \n    // Adjust currentTurnIndex if the new participant has a higher initiative\n    // than the current participant\n    const currentParticipantInitiative = participants[currentTurnIndex]?.initiative || 0;\n    if (initiative > currentParticipantInitiative) {\n      const newIndex = newParticipants.findIndex(p => p.id === newParticipant.id);\n      setCurrentTurnIndex(newIndex);\n      setSelectedParticipantId(newParticipant.id);\n    }\n    \n    return newParticipant;\n  };\n\n  // Update the initiative of a participant\n  const updateInitiative = (participantId: string, initiative: number) => {\n    console.log(`useCombatSession.updateInitiative called for ID ${participantId} with value ${initiative}`);\n    \n    // Find the participant first to verify we have the right one\n    const participant = participants.find(p => p.id === participantId);\n    if (!participant) {\n      console.error(`Participant with ID ${participantId} not found!`);\n      return;\n    }\n    \n    console.log(`Found participant: ${participant.character.name}, current initiative: ${participant.initiative}`);\n    \n    // Create a deep copy to ensure we're not having reference issues\n    const updatedParticipants = JSON.parse(JSON.stringify(participants));\n    \n    // Update directly with a for loop to ensure we're modifying the right object\n    for (let i = 0; i < updatedParticipants.length; i++) {\n      if (updatedParticipants[i].id === participantId) {\n        console.log(`Updating ${updatedParticipants[i].character.name} initiative from ${updatedParticipants[i].initiative} to ${initiative}`);\n        updatedParticipants[i].initiative = initiative;\n      }\n    }\n    \n    // Sort by initiative (highest first)\n    const sortedParticipants = updatedParticipants.sort((a: CombatParticipant, b: CombatParticipant) => b.initiative - a.initiative);\n    \n    // Find new index of current turn participant\n    const currentParticipantId = participants[currentTurnIndex]?.id;\n    const newCurrentTurnIndex = sortedParticipants.findIndex((p: CombatParticipant) => p.id === currentParticipantId);\n    \n    // Log the before and after state for debugging\n    console.log(\"Before update:\", participants.map((p: CombatParticipant) => `${p.character.name}: ${p.initiative}`));\n    console.log(\"After update:\", sortedParticipants.map((p: CombatParticipant) => `${p.character.name}: ${p.initiative}`));\n    \n    // Set state with the new array\n    setParticipants(sortedParticipants);\n    setCurrentTurnIndex(newCurrentTurnIndex >= 0 ? newCurrentTurnIndex : 0);\n  };\n\n  // Update multiple participants' initiatives at once\n  const updateMultipleInitiatives = (initiativeUpdates: Array<{id: string, initiative: number}>) => {\n    console.log(\"Updating multiple initiatives at once:\", initiativeUpdates);\n    \n    // Start with a deep copy of the current participants\n    const updatedParticipants = JSON.parse(JSON.stringify(participants));\n    \n    // Apply all updates\n    initiativeUpdates.forEach(update => {\n      const participantIndex = updatedParticipants.findIndex((p: CombatParticipant) => p.id === update.id);\n      if (participantIndex !== -1) {\n        const participant = updatedParticipants[participantIndex];\n        console.log(`Bulk update: ${participant.character.name} initiative from ${participant.initiative} to ${update.initiative}`);\n        updatedParticipants[participantIndex].initiative = update.initiative;\n      }\n    });\n    \n    // Sort by initiative (highest first)\n    const sortedParticipants = updatedParticipants.sort((a: CombatParticipant, b: CombatParticipant) => \n      b.initiative - a.initiative\n    );\n    \n    // Find new index of current turn participant\n    const currentParticipantId = participants[currentTurnIndex]?.id;\n    const newCurrentTurnIndex = sortedParticipants.findIndex((p: CombatParticipant) => p.id === currentParticipantId);\n    \n    // Log the before and after state for debugging\n    console.log(\"Before bulk update:\", participants.map((p: CombatParticipant) => `${p.character.name}: ${p.initiative}`));\n    console.log(\"After bulk update:\", sortedParticipants.map((p: CombatParticipant) => `${p.character.name}: ${p.initiative}`));\n    \n    // Set state with the new array\n    setParticipants(sortedParticipants);\n    setCurrentTurnIndex(newCurrentTurnIndex >= 0 ? newCurrentTurnIndex : 0);\n  };\n\n  // Update the HP of a participant\n  const updateHp = (participantId: string, hp: number) => {\n    const updatedParticipants = participants.map(p => \n      p.id === participantId \n        ? { \n            ...p, \n            currentHp: hp,\n            isDefeated: hp <= 0\n          }\n        : p\n    );\n    \n    setParticipants(updatedParticipants);\n  };\n\n  // Update the notes of a participant\n  const updateNotes = (participantId: string, notes: string) => {\n    const updatedParticipants = participants.map(p => \n      p.id === participantId \n        ? { ...p, notes }\n        : p\n    );\n    \n    setParticipants(updatedParticipants);\n  };\n\n  // Remove a participant from combat\n  const removeParticipant = (participantId: string) => {\n    // If removing the currently selected participant, select the current turn participant\n    if (selectedParticipantId === participantId) {\n      const currentParticipantId = participants[currentTurnIndex]?.id;\n      setSelectedParticipantId(\n        currentParticipantId !== participantId ? currentParticipantId : null\n      );\n    }\n    \n    // If removing the current turn participant, keep the same index (or adjust if it's the last one)\n    const isCurrentTurn = participants[currentTurnIndex]?.id === participantId;\n    const updatedParticipants = participants.filter(p => p.id !== participantId);\n    \n    if (isCurrentTurn) {\n      // If it was the last participant, go back to index 0\n      if (currentTurnIndex >= updatedParticipants.length) {\n        setCurrentTurnIndex(0);\n      }\n      // Otherwise keep the same index, which will now point to the next participant\n    }\n    \n    setParticipants(updatedParticipants);\n  };\n  \n  // Select a participant for viewing details\n  const selectParticipant = (participantId: string) => {\n    setSelectedParticipantId(participantId);\n  };\n  \n  // Handle ending the combat session\n  const handleClose = () => {\n    navigate('/combats');\n  };\n  \n  return {\n    combat,\n    participants,\n    currentTurnIndex,\n    currentParticipant,\n    selectedParticipant,\n    selectedParticipantId,\n    round,\n    editingParticipantId,\n    handleClose,\n    nextTurn,\n    addParticipant,\n    updateInitiative,\n    updateMultipleInitiatives,\n    updateHp,\n    updateNotes,\n    removeParticipant,\n    selectParticipant,\n    setEditingParticipantId\n  };\n}; ","import React, { useState, useEffect } from 'react';\nimport { \n  Box, \n  Typography, \n  Button,\n  IconButton,\n  Grid,\n  Chip,\n  Card,\n  Tooltip,\n  TextField\n} from '../../../components/ui';\nimport { useCombatSession } from '../hooks/useCombatSession';\nimport { CombatParticipantList } from '../components/CombatParticipantList';\nimport { CombatParticipantDetails } from '../components/CombatParticipantDetails';\nimport { AddParticipantDialog } from '../components/AddParticipantDialog';\nimport { InitiativeDialog } from '../components/InitiativeDialog';\nimport { useStore } from '../../../store';\nimport { ArrowBackIcon } from '../../../assets/icons';\nimport { AssetViewerDialog } from '../../characters/components/AssetViewerDialog';\n\n// Custom arrow forward icon for next turn button\nconst ArrowForwardIcon = () => (\n  <svg \n    xmlns=\"http://www.w3.org/2000/svg\" \n    width=\"20\" \n    height=\"20\" \n    viewBox=\"0 0 24 24\" \n    fill=\"none\" \n    stroke=\"currentColor\" \n    strokeWidth=\"2\" \n    strokeLinecap=\"round\" \n    strokeLinejoin=\"round\" \n    className=\"inline-block\"\n  >\n    <line x1=\"5\" y1=\"12\" x2=\"19\" y2=\"12\"></line>\n    <polyline points=\"12 5 19 12 12 19\"></polyline>\n  </svg>\n);\n\n/**\n * ActiveCombatView component - Optimized layout for combat management\n */\nexport const ActiveCombatView: React.FC = () => {\n  const {\n    combat,\n    participants,\n    currentTurnIndex,\n    currentParticipant,\n    selectedParticipant,\n    selectedParticipantId,\n    round,\n    editingParticipantId,\n    handleClose,\n    nextTurn,\n    addParticipant,\n    updateInitiative,\n    updateMultipleInitiatives,\n    updateHp,\n    updateNotes,\n    removeParticipant,\n    selectParticipant,\n    setEditingParticipantId\n  } = useCombatSession();\n  \n  const [addParticipantDialog, setAddParticipantDialog] = useState(false);\n  const characters = useStore(state => state.characters);\n  \n  // Initiative setting dialogs\n  const [initiativeDialogOpen, setInitiativeDialogOpen] = useState(false);\n  const [pendingParticipant, setPendingParticipant] = useState<any>(null);\n  const [initialSetupComplete, setInitialSetupComplete] = useState(false);\n  \n  // Quick action states\n  const [quickHpEdit, setQuickHpEdit] = useState<string>('');\n  const [quickNotesEdit, setQuickNotesEdit] = useState<string>('');\n  \n  // Asset viewer state\n  const [pdfViewerOpen, setPdfViewerOpen] = useState(false);\n  const [currentPdfAsset, setCurrentPdfAsset] = useState('');\n  const [markdownDialogOpen, setMarkdownDialogOpen] = useState(false);\n  const [currentMarkdownContent, setCurrentMarkdownContent] = useState('');\n  const [currentMarkdownTitle, setCurrentMarkdownTitle] = useState('');\n\n  // Function to view a PDF or image asset\n  const viewPdf = (pdfAsset: string) => {\n    setCurrentPdfAsset(pdfAsset);\n    setPdfViewerOpen(true);\n  };\n  \n  // Function to view markdown content\n  const viewMarkdown = (content: string, title: string) => {\n    setCurrentMarkdownContent(content);\n    setCurrentMarkdownTitle(title);\n    setMarkdownDialogOpen(true);\n  };\n  \n  // Function to close asset viewer\n  const closeAssetViewer = () => {\n    setPdfViewerOpen(false);\n    setMarkdownDialogOpen(false);\n  };\n\n  // Function to view participant description\n  const viewParticipantDescription = (participant: any) => {\n    if (!participant) return;\n    \n    const character = participant.character;\n    \n    if (character.descriptionType === 'pdf' && character.descriptionAssetName) {\n      viewPdf(character.descriptionAssetName);\n    } else if (character.descriptionType === 'image' && character.descriptionAssetName) {\n      viewPdf(character.descriptionAssetName); // For images, we'll use the same viewer\n    } else {\n      // Default to markdown\n      viewMarkdown(character.description || '', character.name);\n    }\n  };\n\n  // Quick HP update with +/- values\n  const applyQuickHpChange = () => {\n    if (!selectedParticipant || !quickHpEdit) return;\n    \n    const value = parseInt(quickHpEdit);\n    if (isNaN(value)) return;\n    \n    const newHp = quickHpEdit.startsWith('+') || quickHpEdit.startsWith('-') \n      ? selectedParticipant.currentHp + value \n      : value;\n    \n    updateHp(selectedParticipant.id, Math.max(0, Math.min(newHp, selectedParticipant.maxHp)));\n    setQuickHpEdit('');\n  };\n  \n  // Quick notes update\n  const applyQuickNotesChange = () => {\n    if (!selectedParticipant || !quickNotesEdit) return;\n    const newNotes = selectedParticipant.notes \n      ? `${selectedParticipant.notes}\\n${quickNotesEdit}` \n      : quickNotesEdit;\n    \n    updateNotes(selectedParticipant.id, newNotes);\n    setQuickNotesEdit('');\n  };\n  \n  // Remove a specific note\n  const removeNote = (participantId: string, noteToRemove: string) => {\n    if (!selectedParticipant) return;\n    \n    const noteLines = selectedParticipant.notes?.split('\\n') || [];\n    const updatedNotes = noteLines.filter(line => line !== noteToRemove).join('\\n');\n    \n    updateNotes(participantId, updatedNotes);\n  };\n\n  // Set cursor position after prefixing input\n  const setInputWithCursor = (prefix: string) => {\n    setQuickHpEdit(prefix);\n    // Delayed focus to ensure input is rendered with the new value\n    setTimeout(() => {\n      const input = document.getElementById('quickHpInput') as HTMLInputElement;\n      if (input) {\n        input.focus();\n        input.setSelectionRange(prefix.length, prefix.length);\n      }\n    }, 50);\n  };\n  \n  // Show initiative setup when combat first loads if participants exist\n  useEffect(() => {\n    if (combat && participants.length > 0 && !initialSetupComplete) {\n      // Check if any participants have initiative 0 (default value)\n      const needsInitiative = participants.some(p => p.initiative === 0);\n      if (needsInitiative) {\n        setInitiativeDialogOpen(true);\n      } else {\n        setInitialSetupComplete(true);\n      }\n    }\n  }, [combat, participants, initialSetupComplete]);\n  \n  // Handle completing initiative setup\n  const handleInitiativeComplete = (updatedParticipants: any[]) => {\n    // Log all initiative values before updating\n    console.log(\"Received updated participants with initiatives:\", \n      updatedParticipants.map(p => `${p.character.name}: ${p.initiative}`));\n\n    // Pending participant gets added separately\n    if (pendingParticipant) {\n      const newParticipant = updatedParticipants[0]; // Get the updated initiative\n      console.log(`Adding new participant ${pendingParticipant.character.name} with initiative ${newParticipant.initiative}`);\n      \n      // Need to use the actual Character object for addParticipant\n      const result = addParticipant(\n        pendingParticipant.character.id,\n        newParticipant.initiative,\n        pendingParticipant.isPlayerCharacter\n      );\n      \n      // Verify the participant was added successfully\n      console.log(\"Add participant result:\", result?.id ? \"Success\" : \"Failed\");\n    } else {\n      // Create an array of initiative updates in the required format\n      const initiativeUpdates = updatedParticipants.map(p => ({\n        id: p.id,\n        initiative: p.initiative\n      }));\n      \n      // Update all initiatives at once to avoid batching issues\n      updateMultipleInitiatives(initiativeUpdates);\n    }\n    \n    setInitiativeDialogOpen(false);\n    setInitialSetupComplete(true);\n    setPendingParticipant(null);\n  };\n  \n  // Modified addParticipant handler to use the initiative dialog\n  const handleAddParticipant = (characterId: string, initiative: number, isPlayerCharacter: boolean) => {\n    const character = characters.find(c => c.id === characterId);\n    if (!character) return;\n    \n    const newParticipant = {\n      id: `${isPlayerCharacter ? 'pc' : 'enemy'}-${character.id}-${Math.random().toString(36).substring(2, 9)}`,\n      character,\n      initiative: 0, // Will be set via initiative dialog\n      currentHp: character.hp || 10,\n      maxHp: character.hp || 10,\n      notes: '',\n      isPlayerCharacter\n    };\n    \n    // Set as pending and open initiative dialog\n    setPendingParticipant(newParticipant);\n    setAddParticipantDialog(false);\n    setInitiativeDialogOpen(true);\n  };\n  \n  // Guard for missing combat data\n  if (!combat) {\n    return (\n      <div className=\"max-w-full h-full p-2\">\n        <div className=\"glass-effect rounded-lg p-4 text-center\">\n          <Typography variant=\"h5\" className=\"font-display text-base font-semibold\">Combat not found</Typography>\n          <Button \n            variant=\"contained\" \n            color=\"primary\" \n            onPress={handleClose}\n            className=\"mt-2 text-sm py-1\"\n          >\n            Back to Combat List\n          </Button>\n        </div>\n      </div>\n    );\n  }\n  \n  return (\n    <div className=\"h-full flex flex-col overflow-hidden\">\n      {/* Compact header */}\n      <div className=\"glass-effect border-b border-border-DEFAULT/20 px-3 py-2\">\n        <div className=\"flex justify-between items-center\">\n          <div className=\"flex items-center\">\n            <IconButton \n              aria-label=\"Back\"\n              onClick={handleClose}\n              className=\"mr-2 p-1\"\n            >\n              <ArrowBackIcon className=\"w-4 h-4 text-primary-light\" />\n            </IconButton>\n            <h1 className=\"font-display font-semibold text-base bg-gradient-to-r from-primary-light to-secondary-light bg-clip-text text-transparent truncate\">\n              {combat.name || 'Untitled Combat'}\n            </h1>\n          </div>\n          \n          <div className=\"flex items-center gap-3\">\n            <Chip \n              label={`Round ${round}`} \n              color=\"primary\" \n              variant=\"outlined\"\n              className=\"text-xs py-0.5 px-2\"\n            />\n            {currentParticipant && (\n              <div className=\"flex items-center\">\n                <Typography variant=\"body2\" className=\"mr-2 text-sm\">\n                  Current Turn: <span className=\"font-semibold\">{currentParticipant.character.name}</span>\n                </Typography>\n              </div>\n            )}\n            <Button \n              variant=\"contained\" \n              color=\"primary\"\n              onPress={nextTurn}\n              endIcon={<ArrowForwardIcon />}\n              isDisabled={participants.length === 0}\n              className=\"text-xs py-1 px-2\"\n            >\n              Next Turn\n            </Button>\n            <Button \n              variant=\"outlined\" \n              color=\"primary\" \n              size=\"small\"\n              onPress={() => setAddParticipantDialog(true)}\n              className=\"text-xs py-0.5 px-2 min-w-0\"\n            >\n              Add Participant\n            </Button>\n          </div>\n        </div>\n      </div>\n      \n      {/* Main content - efficient 3-column layout */}\n      <div className=\"flex flex-1 overflow-hidden\">\n        {/* Left column: Initiative order */}\n        <div className=\"w-1/4 flex-shrink-0 border-r border-border-DEFAULT/20 flex flex-col overflow-hidden\">\n          <div className=\"bg-background-surface/30 px-3 py-2 border-b border-border-DEFAULT/20\">\n            <h2 className=\"font-display font-medium text-sm text-text-primary\">Initiative Order</h2>\n          </div>\n          \n          <div className=\"flex-grow overflow-auto\">\n            {participants.length > 0 ? (\n              <CombatParticipantList\n                participants={participants}\n                currentTurnIndex={currentTurnIndex}\n                selectedParticipantId={selectedParticipantId}\n                onSelectParticipant={selectParticipant}\n              />\n            ) : (\n              <div className=\"text-center p-3\">\n                <p className=\"text-xs text-text-secondary\">\n                  No participants yet\n                </p>\n              </div>\n            )}\n          </div>\n        </div>\n        \n        {/* Middle column: Active participant quick actions */}\n        <div className=\"w-1/4 flex-shrink-0 border-r border-border-DEFAULT/20 flex flex-col overflow-hidden\">\n          <div className=\"bg-background-surface/30 px-3 py-2 border-b border-border-DEFAULT/20\">\n            <h2 className=\"font-display font-medium text-sm text-text-primary\">Quick Actions</h2>\n          </div>\n          \n          {currentParticipant && (\n            <div className=\"p-3 flex flex-col gap-3 overflow-auto\">\n              <Card className=\"p-3\">\n                <Typography variant=\"subtitle2\" className=\"font-semibold mb-2 text-primary-light\">\n                  Current Turn: {currentParticipant.character.name}\n                </Typography>\n                \n                <div className=\"grid grid-cols-2 gap-2 mb-3\">\n                  <div className=\"bg-background-surface/30 p-2 rounded\">\n                    <Typography variant=\"caption\" className=\"block text-text-secondary\">HP</Typography>\n                    <Typography variant=\"body1\" className=\"font-semibold\">\n                      {currentParticipant.currentHp} / {currentParticipant.maxHp}\n                    </Typography>\n                  </div>\n                  <div className=\"bg-background-surface/30 p-2 rounded\">\n                    <Typography variant=\"caption\" className=\"block text-text-secondary\">Type</Typography>\n                    <Typography variant=\"body1\" className=\"font-semibold\">\n                      {currentParticipant.isPlayerCharacter \n                        ? 'Player' \n                        : currentParticipant.character.type || 'Enemy'}\n                    </Typography>\n                  </div>\n                </div>\n                \n                <Button \n                  variant=\"contained\" \n                  color=\"primary\"\n                  onPress={() => viewParticipantDescription(currentParticipant)}\n                  className=\"text-xs py-1 w-full\"\n                >\n                  View Character Sheet\n                </Button>\n              </Card>\n              \n              {selectedParticipant && (\n                <>\n                  <Card className=\"p-3\">\n                    <Typography variant=\"subtitle2\" className=\"font-semibold mb-2\">\n                      Modify HP for {selectedParticipant.character.name}\n                    </Typography>\n                    <div className=\"flex gap-1 mb-3\">\n                      <Tooltip title=\"Deal Damage\">\n                        <Button \n                          variant=\"outlined\" \n                          color=\"error\" \n                          className=\"flex-1 text-xs\"\n                          onPress={() => {\n                            setInputWithCursor('-');\n                          }}\n                        >\n                          Damage\n                        </Button>\n                      </Tooltip>\n                      <Tooltip title=\"Heal\">\n                        <Button \n                          variant=\"outlined\" \n                          color=\"success\" \n                          className=\"flex-1 text-xs\"\n                          onPress={() => {\n                            setInputWithCursor('+');\n                          }}\n                        >\n                          Heal\n                        </Button>\n                      </Tooltip>\n                    </div>\n                    \n                    <div className=\"flex gap-1\">\n                      <TextField\n                        id=\"quickHpInput\"\n                        value={quickHpEdit}\n                        onChange={(value) => setQuickHpEdit(value)}\n                        placeholder=\"e.g. -5, +10, or 25\"\n                        size=\"small\"\n                        className=\"flex-1\"\n                        onKeyDown={(e: React.KeyboardEvent) => {\n                          if (e.key === 'Enter') applyQuickHpChange();\n                        }}\n                      />\n                      <Button \n                        variant=\"contained\" \n                        color=\"primary\"\n                        onPress={applyQuickHpChange}\n                        isDisabled={!quickHpEdit}\n                        className=\"text-xs\"\n                      >\n                        Apply\n                      </Button>\n                    </div>\n                  </Card>\n                  \n                  <Card className=\"p-3\">\n                    <Typography variant=\"subtitle2\" className=\"font-semibold mb-2\">\n                      Add Notes\n                    </Typography>\n                    <TextField\n                      value={quickNotesEdit}\n                      onChange={(value) => setQuickNotesEdit(value)}\n                      placeholder=\"Quick notes...\"\n                      size=\"small\"\n                      multiline\n                      rows={2}\n                      fullWidth\n                      className=\"mb-2\"\n                      onKeyDown={(e: React.KeyboardEvent) => {\n                        if (e.key === 'Enter' && e.ctrlKey) applyQuickNotesChange();\n                      }}\n                    />\n                    <Button \n                      variant=\"contained\" \n                      color=\"primary\"\n                      onPress={applyQuickNotesChange}\n                      isDisabled={!quickNotesEdit}\n                      className=\"text-xs w-full mb-3\"\n                    >\n                      Add Note\n                    </Button>\n                    \n                    {/* Display existing notes with delete option */}\n                    {selectedParticipant?.notes && (\n                      <div className=\"mt-2\">\n                        <Typography variant=\"caption\" className=\"block text-text-secondary mb-1\">\n                          Existing Notes:\n                        </Typography>\n                        <div className=\"max-h-40 overflow-y-auto bg-background-surface/30 rounded p-2\">\n                          {selectedParticipant.notes.split('\\n').filter(note => note.trim()).map((note, index) => (\n                            <div key={index} className=\"flex justify-between items-center py-1 px-1 rounded mb-1 hover:bg-background-surface group\">\n                              <Typography variant=\"body2\" className=\"text-xs break-words flex-grow mr-2\">\n                                {note}\n                              </Typography>\n                              <IconButton \n                                onClick={() => removeNote(selectedParticipant.id, note)}\n                                aria-label=\"Remove note\"\n                                className=\"opacity-0 group-hover:opacity-100 transition-opacity p-0.5\"\n                              >\n                                <svg \n                                  xmlns=\"http://www.w3.org/2000/svg\" \n                                  width=\"14\" \n                                  height=\"14\" \n                                  viewBox=\"0 0 24 24\" \n                                  fill=\"none\" \n                                  stroke=\"currentColor\" \n                                  strokeWidth=\"2\" \n                                  strokeLinecap=\"round\" \n                                  strokeLinejoin=\"round\" \n                                  className=\"text-red-500\"\n                                >\n                                  <line x1=\"18\" y1=\"6\" x2=\"6\" y2=\"18\"></line>\n                                  <line x1=\"6\" y1=\"6\" x2=\"18\" y2=\"18\"></line>\n                                </svg>\n                              </IconButton>\n                            </div>\n                          ))}\n                        </div>\n                      </div>\n                    )}\n                  </Card>\n                </>\n              )}\n            </div>\n          )}\n          \n          {!currentParticipant && (\n            <div className=\"flex items-center justify-center h-full\">\n              <Typography variant=\"body2\" className=\"text-text-secondary\">\n                Start combat to activate quick actions\n              </Typography>\n            </div>\n          )}\n        </div>\n        \n        {/* Right column: Selected participant details */}\n        <div className=\"flex-grow overflow-hidden\">\n          {selectedParticipant ? (\n            <CombatParticipantDetails\n              participant={selectedParticipant}\n              onUpdateHp={updateHp}\n              onUpdateNotes={updateNotes}\n              onRemoveParticipant={removeParticipant}\n              onUpdateInitiative={updateInitiative}\n              isEditing={editingParticipantId === selectedParticipant.id}\n              onSetEditing={(isEditing) => \n                setEditingParticipantId(isEditing ? selectedParticipant.id : null)\n              }\n              onViewDescription={() => viewParticipantDescription(selectedParticipant)}\n            />\n          ) : (\n            <div className=\"h-full flex items-center justify-center\">\n              <div className=\"text-center px-4 py-6\">\n                <div className=\"text-primary-light/50 mb-1\">\n                  <svg \n                    xmlns=\"http://www.w3.org/2000/svg\" \n                    width=\"32\" \n                    height=\"32\" \n                    viewBox=\"0 0 24 24\" \n                    fill=\"none\" \n                    stroke=\"currentColor\" \n                    strokeWidth=\"2\" \n                    strokeLinecap=\"round\" \n                    strokeLinejoin=\"round\" \n                    className=\"mx-auto\"\n                  >\n                    <path d=\"M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2\" />\n                    <circle cx=\"12\" cy=\"7\" r=\"4\" />\n                  </svg>\n                </div>\n                <p className=\"text-sm text-text-secondary\">\n                  Select a participant\n                </p>\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n      \n      {/* Add participant dialog */}\n      <AddParticipantDialog\n        open={addParticipantDialog}\n        onClose={() => setAddParticipantDialog(false)}\n        onAddParticipant={handleAddParticipant}\n        characters={characters}\n      />\n      \n      {/* Initiative setting dialog */}\n      <InitiativeDialog\n        open={initiativeDialogOpen}\n        onClose={() => {\n          if (pendingParticipant) {\n            // If we're setting initiative for a new participant and user cancels,\n            // don't add the participant at all\n            setPendingParticipant(null);\n          }\n          setInitiativeDialogOpen(false);\n        }}\n        participants={pendingParticipant ? [pendingParticipant] : participants}\n        onComplete={handleInitiativeComplete}\n        isSingleParticipant={!!pendingParticipant}\n        title={pendingParticipant ? \"Set Initiative for New Participant\" : \"Set Initiative\"}\n        onViewCharacterDetails={viewParticipantDescription}\n      />\n\n      {/* Asset viewer dialog */}\n      <AssetViewerDialog\n        pdfViewerOpen={pdfViewerOpen}\n        markdownDialogOpen={markdownDialogOpen}\n        currentPdfAsset={currentPdfAsset}\n        currentMarkdownContent={currentMarkdownContent}\n        currentMarkdownTitle={currentMarkdownTitle}\n        onClose={closeAssetViewer}\n      />\n    </div>\n  );\n}; ","import React from 'react';\nimport { Box, Typography, Button } from '../../../components/ui';\nimport { useCombatSession } from '../hooks/useCombatSession';\nimport { ActiveCombatView } from './ActiveCombatView';\nimport MarkdownContent from '../../../components/MarkdownContent';\n\n/**\n * CombatSessionView component\n * \n * Container for rendering the active combat session view.\n * This component handles routing logic while delegating the \n * actual combat UI to ActiveCombatView\n */\nexport const CombatSessionView: React.FC = () => {\n  const { combat, handleClose } = useCombatSession();\n  \n  if (!combat) {\n    return (\n      <Box className=\"p-8 text-center\">\n        <Typography variant=\"h5\" className=\"mb-4\">\n          Combat session not found\n        </Typography>\n        <Button \n          variant=\"contained\" \n          color=\"primary\" \n          onPress={handleClose}\n        >\n          Back to Combat List\n        </Button>\n      </Box>\n    );\n  }\n  \n  return (\n    <div className=\"p-6\">\n      <div className=\"flex justify-between items-center mb-4\">\n        <Typography variant=\"h4\" component=\"h1\" className=\"text-gray-100\">\n          Combat: {combat.name}\n        </Typography>\n        <Button onPress={handleClose} variant=\"outlined\" color=\"secondary\">\n          Exit Without Saving\n        </Button>\n      </div>\n      \n      <Box className=\"bg-gray-800/50 p-4 rounded-lg mb-6\">\n        <MarkdownContent content={combat.description || \"*No description provided*\"} />\n      </Box>\n      \n      <Box className=\"bg-gray-800 p-4 rounded-lg\">\n        <ActiveCombatView />\n      </Box>\n    </div>\n  );\n}; "],"names":["Divider","orientation","className","sx","inlineStyle","orientationClass","jsx","InitiativeBadge","content","color","CombatParticipantList","participants","currentTurnIndex","selectedParticipantId","onSelectParticipant","List","participant","index","isCurrentTurn","isSelected","testIdName","ListItem","jsxs","Avatar","Typography","Box","Chip","CombatParticipantDetails","onUpdateHp","onUpdateNotes","onRemoveParticipant","onUpdateInitiative","isEditing","onSetEditing","onViewDescription","localHp","setLocalHp","useState","localInitiative","setLocalInitiative","localNotes","setLocalNotes","isDefeated","character","hasAsset","useEffect","handleSave","handleCancel","Tooltip","_a","IconButton","DownloadIcon","EditIcon","Fragment","Button","SaveIcon","CloseIcon","Grid","Card","TextField","e","MarkdownContent","AddParticipantDialog","open","onClose","onAddParticipant","characters","selectedCharacterId","setSelectedCharacterId","searchQuery","setSearchQuery","selectedCharacter","setSelectedCharacter","groupedCharacters","React","groups","type","filteredCharacters","c","handleAddCharacter","isPlayerCharacter","resetForm","handleClose","handleCharacterChange","value","renderCharacterGroup","title","charactersInGroup","Combobox","active","selected","Dialog","DialogTitle","DialogContent","id","DialogActions","DICE_OPTIONS","InitiativeDialog","onComplete","isSingleParticipant","onViewCharacterDetails","localParticipants","setLocalParticipants","currentIndex","setCurrentIndex","initiativeValue","setInitiativeValue","diceOption","setDiceOption","bonusValue","setBonusValue","currentParticipant","isLastParticipant","rollInitiative","result","bonus","setManualInitiative","applyCurrentInitiative","initiativeNum","updatedParticipants","p","sortedParticipants","a","b","quickRoll","rollAllRandom","idx","initiativeRoll","option","useCombatSession","navigate","useNavigate","location","useLocation","combats","isCombatAudioInitialized","markCombatAudioInitialized","resetCombatAudioInitialized","useStore","play","stopLocationTracks","useAudioPlayer","combatId","combat","setParticipants","setCurrentTurnIndex","round","setRound","editingParticipantId","setEditingParticipantId","setSelectedParticipantId","effectRunCounter","useRef","runCount","currentCombat","isInitialized","combatLocationIdPrefix","initializeCombat","selectedParticipant","playerParticipants","pc","enemyParticipants","enemy","allParticipants","nextIndex","prevRound","characterId","initiative","newParticipant","newParticipants","currentParticipantInitiative","newIndex","participantId","i","currentParticipantId","newCurrentTurnIndex","initiativeUpdates","update","participantIndex","hp","notes","_b","ArrowForwardIcon","ActiveCombatView","nextTurn","addParticipant","updateInitiative","updateMultipleInitiatives","updateHp","updateNotes","removeParticipant","selectParticipant","addParticipantDialog","setAddParticipantDialog","state","initiativeDialogOpen","setInitiativeDialogOpen","pendingParticipant","setPendingParticipant","initialSetupComplete","setInitialSetupComplete","quickHpEdit","setQuickHpEdit","quickNotesEdit","setQuickNotesEdit","pdfViewerOpen","setPdfViewerOpen","currentPdfAsset","setCurrentPdfAsset","markdownDialogOpen","setMarkdownDialogOpen","currentMarkdownContent","setCurrentMarkdownContent","currentMarkdownTitle","setCurrentMarkdownTitle","viewPdf","pdfAsset","viewMarkdown","closeAssetViewer","viewParticipantDescription","applyQuickHpChange","newHp","applyQuickNotesChange","newNotes","removeNote","noteToRemove","updatedNotes","line","setInputWithCursor","prefix","input","handleInitiativeComplete","handleAddParticipant","ArrowBackIcon","note","AssetViewerDialog","CombatSessionView"],"mappings":"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"}